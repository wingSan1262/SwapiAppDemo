// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.DI.App;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_GetOkHttpClientBuilderFactory implements Factory<OkHttpClient.Builder> {
  private final AppModule module;

  private final Provider<HttpLoggingInterceptor> loggerProvider;

  public AppModule_GetOkHttpClientBuilderFactory(AppModule module,
      Provider<HttpLoggingInterceptor> loggerProvider) {
    this.module = module;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public OkHttpClient.Builder get() {
    return getOkHttpClientBuilder(module, loggerProvider.get());
  }

  public static AppModule_GetOkHttpClientBuilderFactory create(AppModule module,
      Provider<HttpLoggingInterceptor> loggerProvider) {
    return new AppModule_GetOkHttpClientBuilderFactory(module, loggerProvider);
  }

  public static OkHttpClient.Builder getOkHttpClientBuilder(AppModule instance,
      HttpLoggingInterceptor logger) {
    return Preconditions.checkNotNullFromProvides(instance.getOkHttpClientBuilder(logger));
  }
}
