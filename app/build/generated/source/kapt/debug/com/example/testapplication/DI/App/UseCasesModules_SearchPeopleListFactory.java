// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.DI.App;

import com.example.testapplication.data.remote_repository.SwapiApiInterface;
import com.example.testapplication.domain.usecases.SearchPeopleUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCasesModules_SearchPeopleListFactory implements Factory<SearchPeopleUseCase> {
  private final UseCasesModules module;

  private final Provider<SwapiApiInterface> myApiProvider;

  public UseCasesModules_SearchPeopleListFactory(UseCasesModules module,
      Provider<SwapiApiInterface> myApiProvider) {
    this.module = module;
    this.myApiProvider = myApiProvider;
  }

  @Override
  public SearchPeopleUseCase get() {
    return searchPeopleList(module, myApiProvider.get());
  }

  public static UseCasesModules_SearchPeopleListFactory create(UseCasesModules module,
      Provider<SwapiApiInterface> myApiProvider) {
    return new UseCasesModules_SearchPeopleListFactory(module, myApiProvider);
  }

  public static SearchPeopleUseCase searchPeopleList(UseCasesModules instance,
      SwapiApiInterface myApi) {
    return Preconditions.checkNotNullFromProvides(instance.searchPeopleList(myApi));
  }
}
