// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.DI.Activity;

import androidx.appcompat.app.AppCompatActivity;
import com.example.testapplication.DI.Activity.ViewModelProducer.VmFactory;
import com.example.testapplication.feature.SearchViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ActivityModule_SearchViewModelFactory implements Factory<SearchViewModel> {
  private final ActivityModule module;

  private final Provider<AppCompatActivity> activityProvider;

  private final Provider<VmFactory> vmFactoryProvider;

  public ActivityModule_SearchViewModelFactory(ActivityModule module,
      Provider<AppCompatActivity> activityProvider, Provider<VmFactory> vmFactoryProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
    this.vmFactoryProvider = vmFactoryProvider;
  }

  @Override
  public SearchViewModel get() {
    return searchViewModel(module, activityProvider.get(), vmFactoryProvider.get());
  }

  public static ActivityModule_SearchViewModelFactory create(ActivityModule module,
      Provider<AppCompatActivity> activityProvider, Provider<VmFactory> vmFactoryProvider) {
    return new ActivityModule_SearchViewModelFactory(module, activityProvider, vmFactoryProvider);
  }

  public static SearchViewModel searchViewModel(ActivityModule instance, AppCompatActivity activity,
      VmFactory vmFactory) {
    return Preconditions.checkNotNullFromProvides(instance.searchViewModel(activity, vmFactory));
  }
}
