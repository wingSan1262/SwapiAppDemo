// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.DI.App;

import android.app.Application;
import com.example.testapplication.DI.Activity.ViewModelProducer.VmFactory;
import com.example.testapplication.domain.usecases.FetchOfflinePeopleListUseCase;
import com.example.testapplication.domain.usecases.FetchPeopleUseCase;
import com.example.testapplication.domain.usecases.SearchPeopleUseCase;
import com.example.testapplication.domain.usecases.UpdateOfflinePeopleListUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_GetVmFactoryFactory implements Factory<VmFactory> {
  private final AppModule module;

  private final Provider<Application> mApplicationProvider;

  private final Provider<FetchPeopleUseCase> fetchPeopleUseCaseProvider;

  private final Provider<SearchPeopleUseCase> searchPeopleUseCaseProvider;

  private final Provider<FetchOfflinePeopleListUseCase> fetchOfflinePeopleListUseCaseProvider;

  private final Provider<UpdateOfflinePeopleListUseCase> updateOfflinePeopleListUseCaseProvider;

  public AppModule_GetVmFactoryFactory(AppModule module, Provider<Application> mApplicationProvider,
      Provider<FetchPeopleUseCase> fetchPeopleUseCaseProvider,
      Provider<SearchPeopleUseCase> searchPeopleUseCaseProvider,
      Provider<FetchOfflinePeopleListUseCase> fetchOfflinePeopleListUseCaseProvider,
      Provider<UpdateOfflinePeopleListUseCase> updateOfflinePeopleListUseCaseProvider) {
    this.module = module;
    this.mApplicationProvider = mApplicationProvider;
    this.fetchPeopleUseCaseProvider = fetchPeopleUseCaseProvider;
    this.searchPeopleUseCaseProvider = searchPeopleUseCaseProvider;
    this.fetchOfflinePeopleListUseCaseProvider = fetchOfflinePeopleListUseCaseProvider;
    this.updateOfflinePeopleListUseCaseProvider = updateOfflinePeopleListUseCaseProvider;
  }

  @Override
  public VmFactory get() {
    return getVmFactory(module, mApplicationProvider.get(), fetchPeopleUseCaseProvider.get(), searchPeopleUseCaseProvider.get(), fetchOfflinePeopleListUseCaseProvider.get(), updateOfflinePeopleListUseCaseProvider.get());
  }

  public static AppModule_GetVmFactoryFactory create(AppModule module,
      Provider<Application> mApplicationProvider,
      Provider<FetchPeopleUseCase> fetchPeopleUseCaseProvider,
      Provider<SearchPeopleUseCase> searchPeopleUseCaseProvider,
      Provider<FetchOfflinePeopleListUseCase> fetchOfflinePeopleListUseCaseProvider,
      Provider<UpdateOfflinePeopleListUseCase> updateOfflinePeopleListUseCaseProvider) {
    return new AppModule_GetVmFactoryFactory(module, mApplicationProvider, fetchPeopleUseCaseProvider, searchPeopleUseCaseProvider, fetchOfflinePeopleListUseCaseProvider, updateOfflinePeopleListUseCaseProvider);
  }

  public static VmFactory getVmFactory(AppModule instance, Application mApplication,
      FetchPeopleUseCase fetchPeopleUseCase, SearchPeopleUseCase searchPeopleUseCase,
      FetchOfflinePeopleListUseCase fetchOfflinePeopleListUseCase,
      UpdateOfflinePeopleListUseCase updateOfflinePeopleListUseCase) {
    return Preconditions.checkNotNullFromProvides(instance.getVmFactory(mApplication, fetchPeopleUseCase, searchPeopleUseCase, fetchOfflinePeopleListUseCase, updateOfflinePeopleListUseCase));
  }
}
