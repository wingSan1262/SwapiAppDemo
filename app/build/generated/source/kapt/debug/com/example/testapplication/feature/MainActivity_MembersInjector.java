// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.feature;

import com.example.testapplication.DI.Activity.ViewBinderFactory.ViewBinderFactory;
import com.example.testapplication.base_component.base_classes.BaseActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<ViewBinderFactory> viewBinderFactoryProvider;

  private final Provider<SearchViewModel> searchViewModelProvider;

  public MainActivity_MembersInjector(Provider<ViewBinderFactory> viewBinderFactoryProvider,
      Provider<SearchViewModel> searchViewModelProvider) {
    this.viewBinderFactoryProvider = viewBinderFactoryProvider;
    this.searchViewModelProvider = searchViewModelProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<ViewBinderFactory> viewBinderFactoryProvider,
      Provider<SearchViewModel> searchViewModelProvider) {
    return new MainActivity_MembersInjector(viewBinderFactoryProvider, searchViewModelProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    BaseActivity_MembersInjector.injectViewBinderFactory(instance, viewBinderFactoryProvider.get());
    injectSearchViewModel(instance, searchViewModelProvider.get());
  }

  @InjectedFieldSignature("com.example.testapplication.feature.MainActivity.searchViewModel")
  public static void injectSearchViewModel(MainActivity instance, SearchViewModel searchViewModel) {
    instance.searchViewModel = searchViewModel;
  }
}
