// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.DI.App;

import com.example.testapplication.data.remote_repository.SwapiApiInterface;
import com.example.testapplication.domain.usecases.FetchPeopleUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCasesModules_GetPeopleListFactory implements Factory<FetchPeopleUseCase> {
  private final UseCasesModules module;

  private final Provider<SwapiApiInterface> myApiProvider;

  public UseCasesModules_GetPeopleListFactory(UseCasesModules module,
      Provider<SwapiApiInterface> myApiProvider) {
    this.module = module;
    this.myApiProvider = myApiProvider;
  }

  @Override
  public FetchPeopleUseCase get() {
    return getPeopleList(module, myApiProvider.get());
  }

  public static UseCasesModules_GetPeopleListFactory create(UseCasesModules module,
      Provider<SwapiApiInterface> myApiProvider) {
    return new UseCasesModules_GetPeopleListFactory(module, myApiProvider);
  }

  public static FetchPeopleUseCase getPeopleList(UseCasesModules instance,
      SwapiApiInterface myApi) {
    return Preconditions.checkNotNullFromProvides(instance.getPeopleList(myApi));
  }
}
