// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.DI.App;

import com.example.testapplication.data.remote_repository.RemoteApiRetrofitClient;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_GetClientFactory implements Factory<RemoteApiRetrofitClient> {
  private final AppModule module;

  private final Provider<Retrofit> retrofitProvider;

  public AppModule_GetClientFactory(AppModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public RemoteApiRetrofitClient get() {
    return getClient(module, retrofitProvider.get());
  }

  public static AppModule_GetClientFactory create(AppModule module,
      Provider<Retrofit> retrofitProvider) {
    return new AppModule_GetClientFactory(module, retrofitProvider);
  }

  public static RemoteApiRetrofitClient getClient(AppModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.getClient(retrofit));
  }
}
