// Generated by Dagger (https://dagger.dev).
package com.example.testapplication.DI.App;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_GetRetrofitClientFactory implements Factory<Retrofit> {
  private final AppModule module;

  private final Provider<OkHttpClient.Builder> okHttpBuilderProvider;

  public AppModule_GetRetrofitClientFactory(AppModule module,
      Provider<OkHttpClient.Builder> okHttpBuilderProvider) {
    this.module = module;
    this.okHttpBuilderProvider = okHttpBuilderProvider;
  }

  @Override
  public Retrofit get() {
    return getRetrofitClient(module, okHttpBuilderProvider.get());
  }

  public static AppModule_GetRetrofitClientFactory create(AppModule module,
      Provider<OkHttpClient.Builder> okHttpBuilderProvider) {
    return new AppModule_GetRetrofitClientFactory(module, okHttpBuilderProvider);
  }

  public static Retrofit getRetrofitClient(AppModule instance, OkHttpClient.Builder okHttpBuilder) {
    return Preconditions.checkNotNullFromProvides(instance.getRetrofitClient(okHttpBuilder));
  }
}
